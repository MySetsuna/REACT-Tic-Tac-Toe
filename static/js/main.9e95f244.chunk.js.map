{"version":3,"sources":["index.tsx"],"names":["Square","props","className","style","onClick","value","Board","i","this","winLine","indexOf","backgroundColor","squares","Array","fill","map","number","index","renderSquare","Component","Game","lines","state","history","move","sortAsc","stepNumber","xIsNext","count","length","a","b","c","slice","current","getWinLine","setState","concat","step","winner","historyCopy","reverse","sorts","status","heightLightCss","fontWeight","border","borderRadius","moves","stepPlayer","stepRow","Math","ceil","stepCol","buttonCss","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e95f244.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/*\r\ntype StateType = {\r\n    name: string,\r\n    age: number\r\n}\r\n\r\ntype PropsType = {\r\n    name: string,\r\n    age: number\r\n}\r\nComponent<PropsType,StateType>*/\r\n/**\r\n * 也可以这样写\r\n */\r\n//Component  参数<props,state, 任意值>\r\n/*class Square extends Component<{ value: string ,onClick:any}> {\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={() => this.props.onClick()}>\r\n                {this.props.value}\r\n            </button>\r\n        )\r\n    }\r\n}*/\r\nfunction Square(props: { value: string, style: object, onClick: any }) {\r\n    return (\r\n        <button className=\"square\" style={props.style} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends Component<{ squares: string[], onClick: any, winLine: number[] }> {\r\n\r\n    renderSquare(i: number) {\r\n        const winnerHeightLineCss = {backgroundColor: 'yellow'};\r\n        return <Square key={i}\r\n                       style={this.props.winLine && this.props.winLine.indexOf(i) > -1 ? winnerHeightLineCss : {}}\r\n                       value={this.props.squares[i]}\r\n                       onClick={() => this.props.onClick(i)}/>;\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            {\r\n                Array(3).fill(null).map((number, index) => {\r\n                    return (<div key={index} className=\"board-row\">\r\n                        {\r\n                            [index * 3, index * 3 + 1, index * 3 + 2].map((number) => {\r\n                                return this.renderSquare(number)\r\n                            })\r\n                        }\r\n                    </div>)\r\n\r\n                })\r\n            }\r\n        </div>)\r\n\r\n    }\r\n}\r\n\r\ntype StateType = {\r\n    history: any[],\r\n    stepNumber: number,\r\n    move: number,\r\n    sortAsc: boolean,\r\n    xIsNext: boolean,\r\n}\r\n\r\nclass Game extends Component<object, StateType> {\r\n    lines: any[];\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                number: 0,\r\n                winLine: []\r\n            }],\r\n            move: 0,\r\n            sortAsc: true,\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n        this.lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ]\r\n    }\r\n\r\n    getWinLine(squares: string[]) {\r\n        let count = 0;\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            const [a, b, c] = this.lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return this.lines[i];\r\n            }\r\n            if (squares[a] && squares[b] && squares[c] ) {\r\n                count++;\r\n                if (count === this.lines.length) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    handleClick(i: number) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[this.state.stepNumber];\r\n        const squares = current.squares.slice();\r\n        let winLine = current.winLine;\r\n        if (!winLine || (winLine && winLine.length > 0) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        winLine = this.getWinLine(squares);\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                number: i,\r\n                winLine: winLine\r\n            }]),\r\n            move: 0,\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step: number) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winLine = current.winLine;\r\n        let winner;\r\n        if (winLine && winLine.length > 0) {\r\n            winner = current.squares[winLine[0]];\r\n        }\r\n        if (!winLine) {\r\n            winner = 'No Winner'\r\n        }\r\n\r\n        let historyCopy = history;\r\n        if (!this.state.sortAsc) {\r\n            historyCopy = history.map((step) => step);\r\n            //const start = historyCopy.shift();\r\n            historyCopy.reverse();\r\n            //historyCopy.unshift(start);\r\n        }\r\n        const heightLightCss = {\r\n            fontWeight: 'bolder',\r\n            border: '2px solid black',\r\n            borderRadius: '3px'\r\n        };\r\n        const moves = historyCopy.map((step, move) => {\r\n            if (!this.state.sortAsc) {\r\n                move = historyCopy.length - 1 - move;\r\n            }\r\n            const stepPlayer = step.squares[step.number];\r\n            const stepRow = Math.ceil((step.number + 1) / 3);\r\n            const stepCol = (step.number + 1) % 3;\r\n            const buttonCss = move && move === this.state.move ? heightLightCss : {};\r\n            const desc = move ?\r\n                'Go to move #' + move + 'when Player ' + stepPlayer + ' step at row' + stepRow + ' col' + (stepCol || 3) :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button style={buttonCss} onClick={() => {\r\n                        this.setState({\r\n                            move: move,\r\n                        });\r\n                        this.jumpTo(move)\r\n                    }}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let sorts;\r\n        if (moves.length > 1) {\r\n            sorts = (\r\n                <div>\r\n                    <button style={this.state.sortAsc ? {} : heightLightCss} onClick={() => {\r\n                        this.setState({sortAsc: false})\r\n                    }}>desc\r\n                    </button>\r\n                    <button style={this.state.sortAsc ? heightLightCss : {}} onClick={() => {\r\n                        this.setState({sortAsc: true})\r\n                    }}>asc\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        winLine={winLine}\r\n                        onClick={(i: number) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <div>{sorts}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}